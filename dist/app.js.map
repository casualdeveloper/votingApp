{"version":3,"file":"app.js","sources":["webpack:///./src/js/newPollOptions.js","webpack:///./src/js/lib/colorGenerator.js","webpack:///./src/js/newPollPost.js","webpack:///./src/js/showChart.js","webpack:///./src/js/lib/colorInput.js","webpack:///./src/js/index.js"],"sourcesContent":["/* global $ */\n\nimport { generateColor } from \"./lib/colorGenerator\";\nimport colorInput from \"./lib/colorInput\";\n\nvar newColorInput = void 0;\n\nvar options = 2;\n\n// store index of color that input will change\nvar indexOfActiveColor = void 0;\n\nvar addOptionBtn = $(\"#addOptionBtn\");\nvar removeOptionBtn = $(\"#removeOptionBtn\");\nvar newPollOptions = $(\"#newPollOptions\");\nvar newPollOptionsColors = $(\".new-poll-option-colorBox-inner\");\n\n//temp storage for updating color in css\nvar lastUpdatedBox = void 0;\n\n//ref to call submit button for color input\nvar colorInputSubmitButton = void 0;\n\n//\"RemoveOption\" state\nvar disabled = true;\n\n//main array of all colors\nvar _COLORS = [];\n\n//Check if user is on new poll page and if so setup base colors(first 2), initialize color input box and setup bindings\n(function () {\n    if (newPollOptionsColors.length <= 0) return null;\n\n    newColorInput = new colorInput(); //create(still hidden) for user color input box \n    colorInputSubmitButton = newColorInput.getSubmitButton; // set reference for color input submit button\n    bindSetup(); //bind events\n\n    var colors = generateColor(newPollOptionsColors.length, \"hex\");\n    _COLORS = colors;\n\n    for (var i = 0; i < newPollOptionsColors.length; i++) {\n        $(newPollOptionsColors[i]).css(\"background\", colors[i]).text(colors[i]);\n    }\n})();\n\n//Add option when creating new poll\n/*\r\n---->incr options\r\n---->generate new color\r\n---->add new option\r\n---->enable \"RemoveOption\" button\r\n*/\naddOptionBtn.on(\"click\", function () {\n    options++;\n    var tempColor = generateColor(1, \"hex\");\n    _COLORS.push(tempColor);\n\n    newPollOptions.append(generateNewOptionString(tempColor));\n\n    if (disabled) {\n        disabled = false;\n        removeOptionBtn.attr(\"disabled\", false);\n    }\n});\n//Remove option when creating new poll\n/*\r\n---->decrease options (can't get lower than 2)\r\n---->remove latest option and color\r\n---->disable \"RemoveOption\" button if only 2 options are left\r\n*/\nremoveOptionBtn.on(\"click\", function () {\n    if (options > 2) {\n        options--;\n        newPollOptions.children().last().remove();\n        _COLORS.pop();\n\n        if (options == 2) {\n            disabled = true;\n            removeOptionBtn.attr(\"disabled\", true);\n        }\n    }\n});\n\nfunction getColors() {\n    return _COLORS;\n}\n\nfunction generateNewOptionString(color) {\n    var num = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : options;\n\n    return \"<div class=\\\"new-poll-option d-flex mb-2\\\">\" + \"<div class=\\\"new-poll-option-colorBox-outer mr-1\\\">\" + \"<div class=\\\"new-poll-option-colorBox-inner\\\" data-color-number=\" + (num - 1) + \" style=\\\"background:\" + color + \"\\\">\" + color + \"</div>\" + \"</div>\" + \"<input class=\\\"form-control\\\" placeholder=\\\"Option \" + num + \"\\\" name=\\\"option\" + num + \"\\\">\" + \"</div>\";\n}\n\n//making color input box invisible, setting up and applying any color changes\nfunction disableColorInput(val) {\n    newColorInput.disable();\n    _COLORS[indexOfActiveColor] = val;\n    updateColorBox(indexOfActiveColor);\n    indexOfActiveColor = null;\n}\n\nfunction updateColorBox(index) {\n    $(lastUpdatedBox).css(\"background\", _COLORS[index]);\n}\n\nfunction bindSetup() {\n    $(\"#newPollOptions\").on(\"click\", \".new-poll-option-colorBox-outer\", function (e) {\n\n        //set ref for the latest color box (used to update color in css via updateColorBox function)\n        lastUpdatedBox = $(e.currentTarget).children()[0];\n        //getting index and activating color box\n        var tempIndex = lastUpdatedBox.dataset.colorNumber;\n        indexOfActiveColor = tempIndex;\n        newColorInput.activate(_COLORS[tempIndex]);\n\n        //setting position for color input box\n        var positionTop = $(e.currentTarget).position().top;\n        newColorInput.setPositionY(positionTop);\n\n        e.stopPropagation();\n    });\n\n    //bind event for submit button inside color input box\n    colorInputSubmitButton.on(\"click\", function () {\n        if (newColorInput.getState) {\n            disableColorInput(newColorInput.getColor);\n        }\n    });\n    //if clicked anythere else than color input box achieves same effect as submit button\n    $(document).on(\"click\", function (e) {\n        if (newColorInput.getState) {\n            disableColorInput(newColorInput.getColor);\n            e.stopPropagation();\n        }\n    });\n}\n\nexport { getColors };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/newPollOptions.js\n// module id = 0\n// module chunks = 0","// n - amount of colors to make\nfunction generateColor() {\n    var n = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 1;\n    var format = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"hex\";\n\n    var Arr = [];\n\n    if (n <= 0) {\n        Arr.push(\"#000000\");\n    }\n\n    for (var i = 0; i < n; i++) {\n        var color = void 0;\n        var r = Math.round(Math.random() * 255);\n        var g = Math.round(Math.random() * 255);\n        var b = Math.round(Math.random() * 255);\n\n        if (format === \"hex\") {\n            r = fix1CharString(r.toString(16));\n            g = fix1CharString(g.toString(16));\n            b = fix1CharString(b.toString(16));\n            color = \"#\" + r + g + b;\n        } else if (format === \"rgb\") {\n            color = \"rgb(\" + r + \",\" + g + \",\" + b + \")\";\n        } else if (format === \"rgba\") {\n            color = \"rgba(\" + r + \",\" + g + \",\" + b + \",0)\";\n        } else {\n            throw \"Sorry color format \" + format + \" was not recognized.\\nFormats available: hex, rgb, rgba\";\n        }\n\n        Arr.push(color);\n    }\n    // if requested amount of colors were 1(default) return color string, otherwise return array of color strings\n    return n === 1 ? Arr[0] : Arr;\n}\n\nfunction rgbToHex(str) {\n    var regExp = /[^0-9,]/gi; //Match everyhting except numbers and \",\"\n    str = str.replace(regExp, \"\");\n\n    var strArr = str.split(\",\");\n    for (var i = 0; i < 3; i++) {\n        var strInt = parseInt(strArr[i]);\n        console.log(strInt);\n        if (strInt > 255 || strInt < 0) {\n            return null;\n        }\n        strArr[i] = fix1CharString(strInt.toString(16));\n        console.log(strArr[i]);\n    }\n\n    return \"#\" + strArr[0] + strArr[1] + strArr[2];\n}\n\n/*\r\nRemoves hash, symbols, whitespace\r\n if length of string is 3 of 6 string is \"approved\" and returned as valid Hex color\r\n if not returns null\r\n*/\nfunction checkHex(str) {\n    //removes hash and whitespace\n    str = str.replace(/[#\\s]+/g, \"\");\n\n    //remove every symbol\n    str = str.replace(/[^A-Za-z0-9]+/g, \"\");\n    if (str.length === 3 || str.length === 6) {\n        return \"#\" + str;\n    } else {\n        return null;\n    }\n}\n//changes rgb/rgba to hex besides checks if users approved hex is valid.\nfunction normalizeToHex(str) {\n    var regExpMatchWhitespace = /\\s+/g;\n    str = str.replace(regExpMatchWhitespace, \"\");\n    if (str.substr(0, 3) === \"rgb\") {\n        return rgbToHex(str);\n    } else if (str.length >= 3 && str.length <= 7) {\n        return checkHex(str);\n    } else {\n        return null;\n    }\n}\n\n// Checks if hex string has only 1 char and if so adds 0 to the front\nfunction fix1CharString(a) {\n    return a.length === 1 ? \"0\" + a : a;\n}\n\nexport default generateColor;\nexport { generateColor, normalizeToHex };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/lib/colorGenerator.js\n// module id = 1\n// module chunks = 0","/* global $ */\nvar newPollForm = $(\"#newPollForm\");\n\nimport { getColors } from \"./newPollOptions\";\n\nnewPollForm.on(\"submit\", function (e) {\n    //To prevent reload\n    e.preventDefault();\n\n    //Get data from Form\n    var data = newPollForm.serializeArray();\n\n    //Extract options from Form\n    var options = [];\n    //begins at 1 to skip the title\n    for (var i = 1; i < data.length; i++) {\n        options.push(data[i].value);\n    }\n\n    //Generate colors, data.length-1 here is to subtract title from length\n\n    data = {\n        title: data[0].value,\n        options: options,\n        colors: getColors()\n    };\n\n    //Send data\n    $.ajax({\n        type: \"POST\",\n        url: \"/poll\",\n        data: data,\n        dataType: \"json\",\n        success: function success(data) {\n            // Data here is response from server\n            if (typeof data.redirect === \"string\") {\n                // redirect \n                window.location = data.redirect;\n            }\n        }\n\n    });\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/newPollPost.js\n// module id = 2\n// module chunks = 0","/* global poll */\n\nimport Chart from \"chart.js/dist/Chart.min.js\";\n\n(function () {\n\n    var ctx = document.getElementById(\"myChart\");\n    //check if myChart exists (it only exists in page that shows chart)\n    if (ctx != null) {\n\n        var jsPoll = poll;\n\n        var data = {\n            labels: jsPoll.options,\n            datasets: [{\n                data: jsPoll.results,\n                backgroundColor: jsPoll.colors,\n                hoverBackgroundColor: jsPoll.colors\n            }]\n        };\n        new Chart(ctx.getContext(\"2d\"), {\n            type: \"doughnut\",\n            data: data,\n            options: {}\n        });\n    }\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/showChart.js\n// module id = 3\n// module chunks = 0","var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\n/* global $ */\n\nimport { normalizeToHex } from \"./colorGenerator\";\n\nvar colorInputBox = void 0;\n\nvar colorInputBoxString = \"<div class=\\\"color-input-box w-25\\\"><input class=\\\"form-control\\\" id=\\\"colorInput\\\"><button class=\\\"button btn-block button-primary custom-submit-button\\\">Save</button></div>\";\n\nvar colorInput = function () {\n    function colorInput() {\n        _classCallCheck(this, colorInput);\n\n        colorInputBox = $(colorInputBoxString).appendTo(\"body\").hide();\n        bind();\n        this.inputVar = colorInputBox.children(\"input\");\n        this.state = false;\n        this.submitButton = colorInputBox.children(\"button\");\n        this.prevColor; // prevColor just a placeholder for older color if \"error\" would occur when typing in new one\n    }\n\n    _createClass(colorInput, [{\n        key: \"setPositionY\",\n        value: function setPositionY(y) {\n            if (!colorInputBox) {\n                return null;\n            }\n            colorInputBox.css(\"top\", y);\n        }\n    }, {\n        key: \"activate\",\n        value: function activate(color) {\n            if (this.state) {\n                this.changeInputVal(color);\n                return null;\n            }\n\n            this.prevColor = color;\n            this.changeInputVal(color);\n            colorInputBox.show();\n            this.state = true;\n        }\n    }, {\n        key: \"disable\",\n        value: function disable() {\n            if (!this.state) return null;\n\n            colorInputBox.hide();\n            this.state = false;\n        }\n    }, {\n        key: \"changeInputVal\",\n        value: function changeInputVal(val) {\n            this.inputVar.val(val);\n        }\n    }, {\n        key: \"getColor\",\n        get: function get() {\n            var tempColor = this.inputVar.val();\n\n            //if used weird value normalizeToHex should return null\n\n            tempColor = normalizeToHex(tempColor);\n            if (!tempColor) tempColor = this.prevColor;\n\n            return tempColor;\n        }\n    }, {\n        key: \"getSubmitButton\",\n        get: function get() {\n            return this.submitButton;\n        }\n    }, {\n        key: \"getState\",\n        get: function get() {\n            return this.state;\n        }\n    }]);\n\n    return colorInput;\n}();\n\nfunction bind() {\n    colorInputBox.on(\"click\", function (e) {\n        e.stopPropagation();\n    });\n}\n\nexport default colorInput;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/lib/colorInput.js\n// module id = 14\n// module chunks = 0","import \"./showChart\";\nimport \"./newPollOptions\";\nimport \"./newPollPost\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/js/index.js\n// module id = 15\n// module chunks = 0"],"mappingssourceRoot":""}